#启动
# windows
# G:\zookeeper-3.4.14\zookeeper-3.4.14\bin\zkServer.cmd zookeeper的自启动
# G:\kafka_2.11-2.1.1\kafka_2.11-2.1.1\bin\windows\kafka-server-start.bat ../../config/server.properties kafka启动，并且添加节点到zookeeper上



# kafka properties
# linux
# nohup ./bin/kafka-server-start.sh config/server.properties & 后台不中断启动kafka服务
# ./kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 【num】 --partitions 【num】 --topic 【主题】 创建主题
#./kafka-console-producer.sh --broker-list localhost:2181 --topic 【主题】 向kafka发送信息
#./kafka-topics.sh --list --zookeeper localhost：2181 查看所有的kafka的topic
#./kafka-topics.sh --describe --zookeeper localhost：2181 --topic 【主题】查看指定主题的具体信息
#./kafka-topics.sh --zookeeper localhost：2181 --alter --topic 【主题】 --partitions 【num】更改主题的分区数
#./kafka-consumer-groups.sh --zookeeper localhost:2181 --list 查看旧版本的消费者组
#./kafka-consumer-groups.sh --new-consumer --bootstrap-server localhost:9092 --list 查看新的消费者组
#./kafka-console-consumer.sh --zookeeper localhost：2181 --topic 【主题】 --from-beginning 从头开始查看消费信息(历史的)
#./kafka-console-consumer.sh --zookeeper localhost：2181 --topic 【主题】 查看当前的消费信息(实时的)
#./kafka-consumer-groups.sh --bootstrap-server localhost：9092 --describe --group 【消费组】 查看该消费者组还有多少信息未被消费，该消费者者组是新版本的
#./kafka-console-consumer.sh --bootstrap-server localhost:9092 --new-consumer --consumer-property group.id=【新消费者组】 --consumer-property client.id=【消费者】 --topic 【主题】创建消费者组和消费者，该消费者组也可以在程序中设置

# kafka的常用命令(windows)

#.\bin\windows\kafka-server-start.bat .\config\server.properties 运行kafka服务
#.\bin\windows\kafka-topics.bat --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic 【主题】创建主题
#.\bin\windows\kafka-console-producer.bat --broker-list localhost:9092 --topic 【主题】 向kafka发送信息
#.\bin\windows\kafka-topics.bat --list --zookeeper localhost:2181 查看所有的kafka的topic
#.\bin\windows\kafka-console-consumer.bat --bootstrap-server localhost:9092 --topic 【主题】 消费消息(实时的)
#.\bin\windows\kafka-console-consumer.bat --bootstrap-server localhost:9092 --topic 【主题】 --from-beginning消费消息(历史的)